/**
 * Lithuanian LED Matrix Font Library
 * Copyright (c) 2024 @braticks (https://github.com/braticks)
 * MIT License - see LICENSE file
 */

#ifndef LITHUANIAN_FONT_H
#define LITHUANIAN_FONT_H

#include <stdint.h>

typedef struct {
    const char character;    
    const uint8_t width;     
    const uint8_t height;    
    const uint8_t* data;     
    const uint8_t dataSize;  
} FontChar;

// Standard Latin & Lithuanian Characters (8x16)
static const uint8_t CHAR_A[] = {0xf0,0x3f,0xf8,0x3f,0x1c,0x06,0x0c,0x06,0x0c,0x06,0x1c,0x06,0xf8,0x3f,0xf0,0x3f};
static const uint8_t CHAR_A_OGONEK[] = {0xf0,0x3f,0xf8,0x3f,0x1c,0x06,0x0c,0x06,0x0c,0x06,0x1c,0x46,0xf8,0xbf,0xf0,0x3f};
static const uint8_t CHAR_B[] = {0xfc,0x3f,0xfc,0x3f,0xcc,0x30,0xcc,0x30,0xcc,0x30,0xcc,0x30,0x38,0x1f,0x30,0x0f};
static const uint8_t CHAR_C[] = {0xf0,0x0f,0xf8,0x1f,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x38,0x1c,0x30,0x0c};
static const uint8_t CHAR_C_CARON[] = {0xf0,0x0f,0xf8,0x1f,0x0d,0x30,0x0e,0x30,0x0e,0x30,0x0d,0x30,0x38,0x1c,0x30,0x0c};
static const uint8_t CHAR_D[] = {0xfc,0x3f,0xfc,0x3f,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x30,0x0c,0xf0,0x0f,0xc0,0x03};
static const uint8_t CHAR_E[] = {0xfc,0x3f,0xfc,0x3f,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x0c,0x30,0x0c,0x30,0x0c,0x30};
static const uint8_t CHAR_E_DOT[] = {0xfc,0x3f,0xfc,0x3f,0x8c,0x31,0x8a,0x31,0x8a,0x31,0x0c,0x30,0x0c,0x30,0x0c,0x30};
static const uint8_t CHAR_E_OGONEK[] = {0xfc,0x3f,0xfc,0x3f,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x0c,0x30,0x0c,0xb0,0x0c,0x70};
static const uint8_t CHAR_F[] = {0xfc,0x3f,0xfc,0x3f,0x8c,0x01,0x8c,0x01,0x8c,0x01,0x0c,0x00,0x0c,0x00,0x0c,0x00};
static const uint8_t CHAR_G[] = {0xf0,0x0f,0xf8,0x1f,0x0c,0x30,0x0c,0x33,0x0c,0x33,0x0c,0x33,0x38,0x1f,0x30,0x0f};
static const uint8_t CHAR_H[] = {0xfc,0x3f,0xfc,0x3f,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xfc,0x3f,0xfc,0x3f};

// Narrow Characters (4x16)
static const uint8_t CHAR_I[] = {0x00,0x00,0xfc,0x3f,0xfc,0x3f,0x00,0x00};
static const uint8_t CHAR_I_OGONEK[] = {0x00,0x40,0xfc,0xbf,0xfc,0x3f,0x00,0x00};

// Continue with remaining standard width characters
static const uint8_t CHAR_J[] = {0x0c,0x06,0x0c,0x0c,0x0c,0x18,0x0c,0x30,0x0c,0x30,0x0c,0x18,0xfc,0x0f,0xfc,0x07};
static const uint8_t CHAR_K[] = {0xfc,0x3f,0xfc,0x3f,0x80,0x01,0xc0,0x03,0x30,0x0c,0x30,0x0c,0x0c,0x30,0x0c,0x30};
static const uint8_t CHAR_L[] = {0xfc,0x3f,0xfc,0x3f,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30};

// Wide Characters (16x16)
static const uint8_t CHAR_M[] = {0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0xfc,0x3f,0x38,0x00,0x60,0x00,0xc0,0x01,0xc0,0x01,0x60,0x00,0x38,0x00,0xfc,0x3f,0xfc,0x3f,0x00,0x00,0x00,0x00,0x00,0x00};
static const uint8_t CHAR_N[] = {0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0xfc,0x3f,0x18,0x00,0x30,0x00,0xc0,0x00,0x80,0x01,0x00,0x06,0x00,0x0c,0xfc,0x3f,0xfc,0x3f,0x00,0x00,0x00,0x00,0x00,0x00};
static const uint8_t CHAR_O[] = {0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x07,0xf0,0x0f,0x18,0x18,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x18,0x18,0xf0,0x0f,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00};

// Continuing standard width characters (8x16)
static const uint8_t CHAR_P[] = {0xfc,0x3f,0xfc,0x3f,0x0c,0x03,0x0c,0x03,0x0c,0x03,0x0c,0x03,0xf8,0x01,0xf0,0x00};
static const uint8_t CHAR_R[] = {0xfc,0x3f,0xfc,0x3f,0x0c,0x03,0x0c,0x03,0x0c,0x07,0x0c,0x0f,0xf8,0x39,0xf0,0x30};
static const uint8_t CHAR_S[] = {0x30,0x18,0xf0,0x18,0xcc,0x30,0x8c,0x31,0x8c,0x31,0x0c,0x33,0x18,0x0f,0x18,0x0c};
static const uint8_t CHAR_S_CARON[] = {0x30,0x18,0xf0,0x18,0xcd,0x30,0x8a,0x31,0x8a,0x31,0x0d,0x33,0x18,0x0f,0x18,0x0c};
static const uint8_t CHAR_T[] = {0x0c,0x00,0x0c,0x00,0x0c,0x00,0xfc,0x3f,0xfc,0x3f,0x0c,0x00,0x0c,0x00,0x0c,0x00};
static const uint8_t CHAR_U[] = {0xfc,0x0f,0xfc,0x1f,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0xfc,0x1f,0xfc,0x0f};
static const uint8_t CHAR_U_MACRON[] = {0xf8,0x0f,0xf8,0x1f,0x02,0x30,0x02,0x30,0x02,0x30,0x02,0x30,0xf8,0x1f,0xf8,0x0f};
static const uint8_t CHAR_U_OGONEK[] = {0xfc,0x0f,0xfc,0x1f,0x00,0x30,0x00,0x30,0x00,0x70,0x00,0xb0,0xfc,0x1f,0xfc,0x0f};
static const uint8_t CHAR_V[] = {0xfc,0x00,0xfc,0x07,0x00,0x1f,0x00,0x30,0x00,0x30,0x00,0x1f,0xfc,0x07,0xfc,0x00};
static const uint8_t CHAR_Y[] = {0x3c,0x00,0x7c,0x00,0xc0,0x00,0x80,0x3f,0x80,0x3f,0xc0,0x00,0x7c,0x00,0x3c,0x00};
static const uint8_t CHAR_Z[] = {0x0c,0x38,0x0c,0x3c,0x0c,0x36,0x0c,0x33,0x8c,0x31,0xcc,0x30,0x6c,0x30,0x3c,0x30};
static const uint8_t CHAR_Z_CARON[] = {0x0c,0x38,0x0c,0x3c,0x0d,0x36,0x0a,0x33,0x8a,0x31,0xcd,0x30,0x6c,0x30,0x3c,0x30};

// Numbers (8x16 except where noted)
static const uint8_t CHAR_0[] = {0xf8,0x1f,0xfc,0x3f,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0xfc,0x3f,0xf8,0x1f};
static const uint8_t CHAR_1[] = {0x30,0x00,0x30,0x00,0xfc,0x3f,0xfc,0x3f,0x00,0x00,0x00,0x00}; // 6x16
static const uint8_t CHAR_2[] = {0x30,0x38,0x30,0x3c,0x0c,0x36,0x0c,0x33,0x8c,0x31,0xcc,0x30,0x70,0x30,0x30,0x30};
static const uint8_t CHAR_3[] = {0x38,0x38,0x3c,0x78,0x0c,0x60,0x8c,0x61,0x8c,0x61,0x8c,0x61,0xfc,0x7f,0xf8,0x3f};
static const uint8_t CHAR_4[] = {0x80,0x07,0xe0,0x07,0x78,0x06,0x18,0x06,0x0c,0x06,0xfc,0x3f,0xfc,0x3f,0x00,0x06};
static const uint8_t CHAR_5[] = {0x7c,0x18,0xfc,0x19,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x8c,0x0f,0x0c,0x0f};
static const uint8_t CHAR_6[] = {0xf0,0x0f,0xf8,0x1f,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x98,0x1f,0x10,0x0f};
static const uint8_t CHAR_7[] = {0x0c,0x00,0x0c,0x3c,0x0c,0x3f,0x0c,0x03,0xcc,0x00,0xcc,0x00,0x3c,0x00,0x3c,0x00};
static const uint8_t CHAR_8[] = {0x78,0x1e,0xfc,0x3f,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x8c,0x31,0xfc,0x3f,0x78,0x1e};
static const uint8_t CHAR_9[] = {0x78,0x18,0xfc,0x38,0x8c,0x31,0x8c,0x31,0x8c,0x31,0x8c,0x31,0xfc,0x3f,0xf8,0x1f};

// Font mapping array
static const FontChar LithuanianFont[] = {
    {'A', 8, 16, CHAR_A, sizeof(CHAR_A)},
    {'Ą', 8, 16, CHAR_A_OGONEK, sizeof(CHAR_A_OGONEK)},
    {'B', 8, 16, CHAR_B, sizeof(CHAR_B)},
    {'C', 8, 16, CHAR_C, sizeof(CHAR_C)},
    {'Č', 8, 16, CHAR_C_CARON, sizeof(CHAR_C_CARON)},
    {'D', 8, 16, CHAR_D, sizeof(CHAR_D)},
    {'E', 8, 16, CHAR_E, sizeof(CHAR_E)},
    {'Ė', 8, 16, CHAR_E_DOT, sizeof(CHAR_E_DOT)},
    {'Ę', 8, 16, CHAR_E_OGONEK, sizeof(CHAR_E_OGONEK)},
    {'F', 8, 16, CHAR_F, sizeof(CHAR_F)},
    {'G', 8, 16, CHAR_G, sizeof(CHAR_G)},
    {'H', 8, 16, CHAR_H, sizeof(CHAR_H)},
    {'I', 4, 16, CHAR_I, sizeof(CHAR_I)},
    {'Į', 4, 16, CHAR_I_OGONEK, sizeof(CHAR_I_OGONEK)},
    {'J', 8, 16, CHAR_J, sizeof(CHAR_J)},
    {'K', 8, 16, CHAR_K, sizeof(CHAR_K)},
    {'L', 6, 16, CHAR_L, sizeof(CHAR_L)},
    {'M', 16, 16, CHAR_M, sizeof(CHAR_M)},
    {'N', 16, 16, CHAR_N, sizeof(CHAR_N)},
    {'O', 16, 16, CHAR_O, sizeof(CHAR_O)},
    {'P', 8, 16, CHAR_P, sizeof(CHAR_P)},
    {'R', 8, 16, CHAR_R, sizeof(CHAR_R)},
    {'S', 8, 16, CHAR_S, sizeof(CHAR_S)},
    {'Š', 8, 16, CHAR_S_CARON, sizeof(CHAR_S_CARON)},
    {'T', 8, 16, CHAR_T, sizeof(CHAR_T)},
    {'U', 8, 16, CHAR_U, sizeof(CHAR_U)},
    {'Ū', 8, 16, CHAR_U_MACRON, sizeof(CHAR_U_MACRON)},
    {'Ų', 8, 16, CHAR_U_OGONEK, sizeof(CHAR_U_OGONEK)},
    {'V', 8, 16, CHAR_V, sizeof(CHAR_V)},
    {'Y', 8, 16, CHAR_Y, sizeof(CHAR_Y)},
    {'Z', 8, 16, CHAR_Z, sizeof(CHAR_Z)},
    {'Ž', 8, 16, CHAR_Z_CARON, sizeof(CHAR_Z_CARON)},
    {'0', 8, 16, CHAR_0, sizeof(CHAR_0)},
    {'1', 6, 16, CHAR_1, sizeof(CHAR_1)},
    {'2', 8, 16, CHAR_2, sizeof(CHAR_2)},
    {'3', 8, 16, CHAR_3, sizeof(CHAR_3)},
    {'4', 8, 16, CHAR_4, sizeof(CHAR_4)},
    {'5', 8, 16, CHAR_5, sizeof(CHAR_5)},
    {'6', 8, 16, CHAR_6, sizeof(CHAR_6)},
    {'7', 8, 16, CHAR_7, sizeof(CHAR_7)},
    {'8', 8, 16, CHAR_8, sizeof(CHAR_8)},
    {'9', 8, 16, CHAR_9, sizeof(CHAR_9)}
};

// Helper function to find a character in the font array
const FontChar* getLithuanianChar(char c) {
    for(size_t i = 0; i < sizeof(LithuanianFont)/sizeof(FontChar); i++) {
        if(LithuanianFont[i].character == c) {
            return &LithuanianFont[i];
        }
    }
    return NULL; // Character not found
}

#endif // LITHUANIAN_FONT_H
